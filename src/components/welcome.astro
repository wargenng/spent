---
import "@/styles/globals.css";
import type { Paycheck, Payment } from "@/types/db";
import PaycheckEntry from "./paycheckentry/paycheckentryhandler";
import PaymentButton from "./paymententry/paymentbutton";
import { Button } from "./ui/button";
import CardEntry from "./cardentry/cardentry";

const { userId, payments, paychecks, categories, cards } = Astro.props;

const currentPaycheck = paychecks.find(
    (paycheck: Paycheck) =>
        new Date(paycheck.startDate) <= new Date() &&
        new Date(paycheck.endDate) >= new Date()
);
const total = payments
    .filter((payment: Payment) => payment.paycheckId === currentPaycheck?.id)
    .reduce((total: number, payment: Payment) => total + payment.amount, 0);
const formatedTotal =
    (total < 0 ? "" : "+") +
    total.toLocaleString("en-US", {
        style: "currency",
        currency: "USD",
    });
---

<div class="w-full flex flex-col gap-4 items-start py-4">
    {
        cards.length === 0 ? (
            <div class="flex flex-col gap-4 w-full">
                <h1 class="m-0 text-5xl font-bold ">No cards added</h1>
                <CardEntry userId={userId} client:only="solid-js">
                    <Button>Add card</Button>
                </CardEntry>
            </div>
        ) : currentPaycheck ? (
            <div class="flex flex-col gap-4 w-full">
                <div class="flex justify-between w-full items-center">
                    <h1>{currentPaycheck.title}</h1>
                    <h1>
                        {new Date(currentPaycheck.startDate).toLocaleDateString(
                            "en-US",
                            {
                                month: "2-digit",
                                day: "2-digit",
                            }
                        )}{" "}
                        -{" "}
                        {new Date(currentPaycheck.endDate).toLocaleDateString(
                            "en-US",
                            {
                                month: "2-digit",
                                day: "2-digit",
                                year: "numeric",
                            }
                        )}
                    </h1>
                </div>
                <h1 class="m-0 text-5xl font-bold ">{formatedTotal}</h1>
                <div class="flex gap-4 ">
                    <PaymentButton
                        userId={userId}
                        cards={cards}
                        categories={categories}
                        paychecks={paychecks}
                        client:only="solid-js"
                    />
                </div>
            </div>
        ) : (
            <div class="flex flex-col gap-4">
                <h1 class="m-0 text-5xl font-bold ">
                    No paycheck for this cycle
                </h1>
                <PaycheckEntry
                    userId={userId}
                    hasCards={cards.length > 0}
                    client:only="solid-js"
                >
                    <Button>Add paycheck</Button>
                </PaycheckEntry>
            </div>
        )
    }
</div>
